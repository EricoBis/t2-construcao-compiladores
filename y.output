   0  $accept : prog $end

   1  $$1 :

   2  prog : $$1 dList mList

   3  dList : decl dList
   4        |

   5  decl : declStruct
   6       | type IDENT ';'
   7       | type '[' NUM ']' IDENT ';'

   8  $$2 :

   9  $$3 :

  10  declStruct : STRUCT IDENT $$2 '{' dList '}' $$3 ';'

  11  type : INT
  12       | FLOAT
  13       | BOOL
  14       | STRING
  15       | IDENT

  16  mList : metodo mList
  17        |

  18  $$4 :

  19  $$5 :

  20  metodo : FUNC typeFunc IDENT $$4 '(' parametros ')' $$5 bloco

  21  typeFunc : type
  22           | VOID

  23  parametros : listaParam
  24             |

  25  listaParam : param ',' listaParam
  26             | param

  27  param : type IDENT

  28  bloco : '{' listacmd '}'

  29  listacmd : listacmd cmd
  30           |

  31  cmd : exp ';'

  32  $$6 :

  33  cmd : IF '(' exp ')' $$6 cmd
  34      | type IDENT ';'
  35      | type IDENT '=' exp ';'
  36      | RETURN exp ';'

  37  $$7 :

  38  callFunc : IDENT $$7 '(' argsOuSemArgs ')'

  39  argsOuSemArgs : args
  40                |

  41  args : exp ',' args
  42       | exp ',' args

  43  exp : exp '+' exp
  44      | exp '-' exp
  45      | exp '*' exp
  46      | exp '/' exp
  47      | exp '>' exp
  48      | exp AND exp
  49      | exp '<' exp
  50      | exp OR exp
  51      | exp EQUALS exp
  52      | exp DIFF exp
  53      | callFunc
  54      | NUM
  55      | '(' exp ')'
  56      | LITERAL
  57      | IDENT
  58      | IDENT '[' exp ']'
  59      | exp '=' exp
  60      | exp '.' IDENT

state 0
	$accept : . prog $end  (0)
	$$1 : .  (1)

	.  reduce 1

	prog  goto 1
	$$1  goto 2


state 1
	$accept : prog . $end  (0)

	$end  accept


state 2
	prog : $$1 . dList mList  (2)
	dList : .  (4)

	IDENT  shift 3
	INT  shift 4
	FLOAT  shift 5
	BOOL  shift 6
	STRING  shift 7
	STRUCT  shift 8
	$end  reduce 4
	FUNC  reduce 4

	type  goto 9
	dList  goto 10
	decl  goto 11
	declStruct  goto 12


state 3
	type : IDENT .  (15)

	.  reduce 15


state 4
	type : INT .  (11)

	.  reduce 11


state 5
	type : FLOAT .  (12)

	.  reduce 12


state 6
	type : BOOL .  (13)

	.  reduce 13


state 7
	type : STRING .  (14)

	.  reduce 14


state 8
	declStruct : STRUCT . IDENT $$2 '{' dList '}' $$3 ';'  (10)

	IDENT  shift 13
	.  error


state 9
	decl : type . IDENT ';'  (6)
	decl : type . '[' NUM ']' IDENT ';'  (7)

	IDENT  shift 14
	'['  shift 15
	.  error


state 10
	prog : $$1 dList . mList  (2)
	mList : .  (17)

	FUNC  shift 16
	$end  reduce 17

	mList  goto 17
	metodo  goto 18


state 11
	dList : decl . dList  (3)
	dList : .  (4)

	IDENT  shift 3
	INT  shift 4
	FLOAT  shift 5
	BOOL  shift 6
	STRING  shift 7
	STRUCT  shift 8
	$end  reduce 4
	FUNC  reduce 4
	'}'  reduce 4

	type  goto 9
	dList  goto 19
	decl  goto 11
	declStruct  goto 12


state 12
	decl : declStruct .  (5)

	.  reduce 5


state 13
	declStruct : STRUCT IDENT . $$2 '{' dList '}' $$3 ';'  (10)
	$$2 : .  (8)

	.  reduce 8

	$$2  goto 20


state 14
	decl : type IDENT . ';'  (6)

	';'  shift 21
	.  error


state 15
	decl : type '[' . NUM ']' IDENT ';'  (7)

	NUM  shift 22
	.  error


state 16
	metodo : FUNC . typeFunc IDENT $$4 '(' parametros ')' $$5 bloco  (20)

	IDENT  shift 3
	INT  shift 4
	FLOAT  shift 5
	BOOL  shift 6
	STRING  shift 7
	VOID  shift 23
	.  error

	type  goto 24
	typeFunc  goto 25


state 17
	prog : $$1 dList mList .  (2)

	.  reduce 2


state 18
	mList : metodo . mList  (16)
	mList : .  (17)

	FUNC  shift 16
	$end  reduce 17

	mList  goto 26
	metodo  goto 18


state 19
	dList : decl dList .  (3)

	.  reduce 3


state 20
	declStruct : STRUCT IDENT $$2 . '{' dList '}' $$3 ';'  (10)

	'{'  shift 27
	.  error


state 21
	decl : type IDENT ';' .  (6)

	.  reduce 6


state 22
	decl : type '[' NUM . ']' IDENT ';'  (7)

	']'  shift 28
	.  error


state 23
	typeFunc : VOID .  (22)

	.  reduce 22


state 24
	typeFunc : type .  (21)

	.  reduce 21


state 25
	metodo : FUNC typeFunc . IDENT $$4 '(' parametros ')' $$5 bloco  (20)

	IDENT  shift 29
	.  error


state 26
	mList : metodo mList .  (16)

	.  reduce 16


state 27
	declStruct : STRUCT IDENT $$2 '{' . dList '}' $$3 ';'  (10)
	dList : .  (4)

	IDENT  shift 3
	INT  shift 4
	FLOAT  shift 5
	BOOL  shift 6
	STRING  shift 7
	STRUCT  shift 8
	'}'  reduce 4

	type  goto 9
	dList  goto 30
	decl  goto 11
	declStruct  goto 12


state 28
	decl : type '[' NUM ']' . IDENT ';'  (7)

	IDENT  shift 31
	.  error


state 29
	metodo : FUNC typeFunc IDENT . $$4 '(' parametros ')' $$5 bloco  (20)
	$$4 : .  (18)

	.  reduce 18

	$$4  goto 32


state 30
	declStruct : STRUCT IDENT $$2 '{' dList . '}' $$3 ';'  (10)

	'}'  shift 33
	.  error


state 31
	decl : type '[' NUM ']' IDENT . ';'  (7)

	';'  shift 34
	.  error


state 32
	metodo : FUNC typeFunc IDENT $$4 . '(' parametros ')' $$5 bloco  (20)

	'('  shift 35
	.  error


state 33
	declStruct : STRUCT IDENT $$2 '{' dList '}' . $$3 ';'  (10)
	$$3 : .  (9)

	.  reduce 9

	$$3  goto 36


state 34
	decl : type '[' NUM ']' IDENT ';' .  (7)

	.  reduce 7


state 35
	metodo : FUNC typeFunc IDENT $$4 '(' . parametros ')' $$5 bloco  (20)
	parametros : .  (24)

	IDENT  shift 3
	INT  shift 4
	FLOAT  shift 5
	BOOL  shift 6
	STRING  shift 7
	')'  reduce 24

	type  goto 37
	parametros  goto 38
	listaParam  goto 39
	param  goto 40


state 36
	declStruct : STRUCT IDENT $$2 '{' dList '}' $$3 . ';'  (10)

	';'  shift 41
	.  error


state 37
	param : type . IDENT  (27)

	IDENT  shift 42
	.  error


state 38
	metodo : FUNC typeFunc IDENT $$4 '(' parametros . ')' $$5 bloco  (20)

	')'  shift 43
	.  error


state 39
	parametros : listaParam .  (23)

	.  reduce 23


state 40
	listaParam : param . ',' listaParam  (25)
	listaParam : param .  (26)

	','  shift 44
	')'  reduce 26


state 41
	declStruct : STRUCT IDENT $$2 '{' dList '}' $$3 ';' .  (10)

	.  reduce 10


state 42
	param : type IDENT .  (27)

	.  reduce 27


state 43
	metodo : FUNC typeFunc IDENT $$4 '(' parametros ')' . $$5 bloco  (20)
	$$5 : .  (19)

	.  reduce 19

	$$5  goto 45


state 44
	listaParam : param ',' . listaParam  (25)

	IDENT  shift 3
	INT  shift 4
	FLOAT  shift 5
	BOOL  shift 6
	STRING  shift 7
	.  error

	type  goto 37
	listaParam  goto 46
	param  goto 40


state 45
	metodo : FUNC typeFunc IDENT $$4 '(' parametros ')' $$5 . bloco  (20)

	'{'  shift 47
	.  error

	bloco  goto 48


state 46
	listaParam : param ',' listaParam .  (25)

	.  reduce 25


state 47
	bloco : '{' . listacmd '}'  (28)
	listacmd : .  (30)

	.  reduce 30

	listacmd  goto 49


state 48
	metodo : FUNC typeFunc IDENT $$4 '(' parametros ')' $$5 bloco .  (20)

	.  reduce 20


state 49
	bloco : '{' listacmd . '}'  (28)
	listacmd : listacmd . cmd  (29)

	IDENT  shift 50
	INT  shift 4
	FLOAT  shift 5
	BOOL  shift 6
	NUM  shift 51
	STRING  shift 7
	LITERAL  shift 52
	IF  shift 53
	RETURN  shift 54
	'}'  shift 55
	'('  shift 56
	.  error

	type  goto 57
	exp  goto 58
	callFunc  goto 59
	cmd  goto 60


state 50
	type : IDENT .  (15)
	callFunc : IDENT . $$7 '(' argsOuSemArgs ')'  (38)
	exp : IDENT .  (57)
	exp : IDENT . '[' exp ']'  (58)
	$$7 : .  (37)

	'['  shift 61
	IDENT  reduce 15
	AND  reduce 57
	OR  reduce 57
	EQUALS  reduce 57
	DIFF  reduce 57
	'='  reduce 57
	'>'  reduce 57
	'<'  reduce 57
	'+'  reduce 57
	'-'  reduce 57
	'*'  reduce 57
	'/'  reduce 57
	'.'  reduce 57
	';'  reduce 57
	'('  reduce 37

	$$7  goto 62


state 51
	exp : NUM .  (54)

	.  reduce 54


state 52
	exp : LITERAL .  (56)

	.  reduce 56


state 53
	cmd : IF . '(' exp ')' $$6 cmd  (33)

	'('  shift 63
	.  error


state 54
	cmd : RETURN . exp ';'  (36)

	IDENT  shift 64
	NUM  shift 51
	LITERAL  shift 52
	'('  shift 56
	.  error

	exp  goto 65
	callFunc  goto 59


state 55
	bloco : '{' listacmd '}' .  (28)

	.  reduce 28


state 56
	exp : '(' . exp ')'  (55)

	IDENT  shift 64
	NUM  shift 51
	LITERAL  shift 52
	'('  shift 56
	.  error

	exp  goto 66
	callFunc  goto 59


state 57
	cmd : type . IDENT ';'  (34)
	cmd : type . IDENT '=' exp ';'  (35)

	IDENT  shift 67
	.  error


state 58
	cmd : exp . ';'  (31)
	exp : exp . '+' exp  (43)
	exp : exp . '-' exp  (44)
	exp : exp . '*' exp  (45)
	exp : exp . '/' exp  (46)
	exp : exp . '>' exp  (47)
	exp : exp . AND exp  (48)
	exp : exp . '<' exp  (49)
	exp : exp . OR exp  (50)
	exp : exp . EQUALS exp  (51)
	exp : exp . DIFF exp  (52)
	exp : exp . '=' exp  (59)
	exp : exp . '.' IDENT  (60)

	AND  shift 68
	OR  shift 69
	EQUALS  shift 70
	DIFF  shift 71
	'='  shift 72
	'>'  shift 73
	'<'  shift 74
	'+'  shift 75
	'-'  shift 76
	'*'  shift 77
	'/'  shift 78
	'.'  shift 79
	';'  shift 80
	.  error


state 59
	exp : callFunc .  (53)

	.  reduce 53


state 60
	listacmd : listacmd cmd .  (29)

	.  reduce 29


state 61
	exp : IDENT '[' . exp ']'  (58)

	IDENT  shift 64
	NUM  shift 51
	LITERAL  shift 52
	'('  shift 56
	.  error

	exp  goto 81
	callFunc  goto 59


state 62
	callFunc : IDENT $$7 . '(' argsOuSemArgs ')'  (38)

	'('  shift 82
	.  error


state 63
	cmd : IF '(' . exp ')' $$6 cmd  (33)

	IDENT  shift 64
	NUM  shift 51
	LITERAL  shift 52
	'('  shift 56
	.  error

	exp  goto 83
	callFunc  goto 59


state 64
	callFunc : IDENT . $$7 '(' argsOuSemArgs ')'  (38)
	exp : IDENT .  (57)
	exp : IDENT . '[' exp ']'  (58)
	$$7 : .  (37)

	'['  shift 61
	AND  reduce 57
	OR  reduce 57
	EQUALS  reduce 57
	DIFF  reduce 57
	'='  reduce 57
	'>'  reduce 57
	'<'  reduce 57
	'+'  reduce 57
	'-'  reduce 57
	'*'  reduce 57
	'/'  reduce 57
	'.'  reduce 57
	';'  reduce 57
	']'  reduce 57
	'('  reduce 37
	')'  reduce 57
	','  reduce 57

	$$7  goto 62


state 65
	cmd : RETURN exp . ';'  (36)
	exp : exp . '+' exp  (43)
	exp : exp . '-' exp  (44)
	exp : exp . '*' exp  (45)
	exp : exp . '/' exp  (46)
	exp : exp . '>' exp  (47)
	exp : exp . AND exp  (48)
	exp : exp . '<' exp  (49)
	exp : exp . OR exp  (50)
	exp : exp . EQUALS exp  (51)
	exp : exp . DIFF exp  (52)
	exp : exp . '=' exp  (59)
	exp : exp . '.' IDENT  (60)

	AND  shift 68
	OR  shift 69
	EQUALS  shift 70
	DIFF  shift 71
	'='  shift 72
	'>'  shift 73
	'<'  shift 74
	'+'  shift 75
	'-'  shift 76
	'*'  shift 77
	'/'  shift 78
	'.'  shift 79
	';'  shift 84
	.  error


state 66
	exp : exp . '+' exp  (43)
	exp : exp . '-' exp  (44)
	exp : exp . '*' exp  (45)
	exp : exp . '/' exp  (46)
	exp : exp . '>' exp  (47)
	exp : exp . AND exp  (48)
	exp : exp . '<' exp  (49)
	exp : exp . OR exp  (50)
	exp : exp . EQUALS exp  (51)
	exp : exp . DIFF exp  (52)
	exp : '(' exp . ')'  (55)
	exp : exp . '=' exp  (59)
	exp : exp . '.' IDENT  (60)

	AND  shift 68
	OR  shift 69
	EQUALS  shift 70
	DIFF  shift 71
	'='  shift 72
	'>'  shift 73
	'<'  shift 74
	'+'  shift 75
	'-'  shift 76
	'*'  shift 77
	'/'  shift 78
	'.'  shift 79
	')'  shift 85
	.  error


state 67
	cmd : type IDENT . ';'  (34)
	cmd : type IDENT . '=' exp ';'  (35)

	'='  shift 86
	';'  shift 87
	.  error


state 68
	exp : exp AND . exp  (48)

	IDENT  shift 64
	NUM  shift 51
	LITERAL  shift 52
	'('  shift 56
	.  error

	exp  goto 88
	callFunc  goto 59


state 69
	exp : exp OR . exp  (50)

	IDENT  shift 64
	NUM  shift 51
	LITERAL  shift 52
	'('  shift 56
	.  error

	exp  goto 89
	callFunc  goto 59


state 70
	exp : exp EQUALS . exp  (51)

	IDENT  shift 64
	NUM  shift 51
	LITERAL  shift 52
	'('  shift 56
	.  error

	exp  goto 90
	callFunc  goto 59


state 71
	exp : exp DIFF . exp  (52)

	IDENT  shift 64
	NUM  shift 51
	LITERAL  shift 52
	'('  shift 56
	.  error

	exp  goto 91
	callFunc  goto 59


state 72
	exp : exp '=' . exp  (59)

	IDENT  shift 64
	NUM  shift 51
	LITERAL  shift 52
	'('  shift 56
	.  error

	exp  goto 92
	callFunc  goto 59


state 73
	exp : exp '>' . exp  (47)

	IDENT  shift 64
	NUM  shift 51
	LITERAL  shift 52
	'('  shift 56
	.  error

	exp  goto 93
	callFunc  goto 59


state 74
	exp : exp '<' . exp  (49)

	IDENT  shift 64
	NUM  shift 51
	LITERAL  shift 52
	'('  shift 56
	.  error

	exp  goto 94
	callFunc  goto 59


state 75
	exp : exp '+' . exp  (43)

	IDENT  shift 64
	NUM  shift 51
	LITERAL  shift 52
	'('  shift 56
	.  error

	exp  goto 95
	callFunc  goto 59


state 76
	exp : exp '-' . exp  (44)

	IDENT  shift 64
	NUM  shift 51
	LITERAL  shift 52
	'('  shift 56
	.  error

	exp  goto 96
	callFunc  goto 59


state 77
	exp : exp '*' . exp  (45)

	IDENT  shift 64
	NUM  shift 51
	LITERAL  shift 52
	'('  shift 56
	.  error

	exp  goto 97
	callFunc  goto 59


state 78
	exp : exp '/' . exp  (46)

	IDENT  shift 64
	NUM  shift 51
	LITERAL  shift 52
	'('  shift 56
	.  error

	exp  goto 98
	callFunc  goto 59


state 79
	exp : exp '.' . IDENT  (60)

	IDENT  shift 99
	.  error


state 80
	cmd : exp ';' .  (31)

	.  reduce 31


state 81
	exp : exp . '+' exp  (43)
	exp : exp . '-' exp  (44)
	exp : exp . '*' exp  (45)
	exp : exp . '/' exp  (46)
	exp : exp . '>' exp  (47)
	exp : exp . AND exp  (48)
	exp : exp . '<' exp  (49)
	exp : exp . OR exp  (50)
	exp : exp . EQUALS exp  (51)
	exp : exp . DIFF exp  (52)
	exp : IDENT '[' exp . ']'  (58)
	exp : exp . '=' exp  (59)
	exp : exp . '.' IDENT  (60)

	AND  shift 68
	OR  shift 69
	EQUALS  shift 70
	DIFF  shift 71
	'='  shift 72
	'>'  shift 73
	'<'  shift 74
	'+'  shift 75
	'-'  shift 76
	'*'  shift 77
	'/'  shift 78
	'.'  shift 79
	']'  shift 100
	.  error


state 82
	callFunc : IDENT $$7 '(' . argsOuSemArgs ')'  (38)
	argsOuSemArgs : .  (40)

	IDENT  shift 64
	NUM  shift 51
	LITERAL  shift 52
	'('  shift 56
	')'  reduce 40

	exp  goto 101
	callFunc  goto 59
	argsOuSemArgs  goto 102
	args  goto 103


state 83
	cmd : IF '(' exp . ')' $$6 cmd  (33)
	exp : exp . '+' exp  (43)
	exp : exp . '-' exp  (44)
	exp : exp . '*' exp  (45)
	exp : exp . '/' exp  (46)
	exp : exp . '>' exp  (47)
	exp : exp . AND exp  (48)
	exp : exp . '<' exp  (49)
	exp : exp . OR exp  (50)
	exp : exp . EQUALS exp  (51)
	exp : exp . DIFF exp  (52)
	exp : exp . '=' exp  (59)
	exp : exp . '.' IDENT  (60)

	AND  shift 68
	OR  shift 69
	EQUALS  shift 70
	DIFF  shift 71
	'='  shift 72
	'>'  shift 73
	'<'  shift 74
	'+'  shift 75
	'-'  shift 76
	'*'  shift 77
	'/'  shift 78
	'.'  shift 79
	')'  shift 104
	.  error


state 84
	cmd : RETURN exp ';' .  (36)

	.  reduce 36


state 85
	exp : '(' exp ')' .  (55)

	.  reduce 55


state 86
	cmd : type IDENT '=' . exp ';'  (35)

	IDENT  shift 64
	NUM  shift 51
	LITERAL  shift 52
	'('  shift 56
	.  error

	exp  goto 105
	callFunc  goto 59


state 87
	cmd : type IDENT ';' .  (34)

	.  reduce 34


state 88
	exp : exp . '+' exp  (43)
	exp : exp . '-' exp  (44)
	exp : exp . '*' exp  (45)
	exp : exp . '/' exp  (46)
	exp : exp . '>' exp  (47)
	exp : exp . AND exp  (48)
	exp : exp AND exp .  (48)
	exp : exp . '<' exp  (49)
	exp : exp . OR exp  (50)
	exp : exp . EQUALS exp  (51)
	exp : exp . DIFF exp  (52)
	exp : exp . '=' exp  (59)
	exp : exp . '.' IDENT  (60)

	'.'  shift 79
	AND  reduce 48
	OR  reduce 48
	EQUALS  reduce 48
	DIFF  reduce 48
	'='  reduce 48
	'>'  reduce 48
	'<'  reduce 48
	'+'  reduce 48
	'-'  reduce 48
	'*'  reduce 48
	'/'  reduce 48
	';'  reduce 48
	']'  reduce 48
	')'  reduce 48
	','  reduce 48


state 89
	exp : exp . '+' exp  (43)
	exp : exp . '-' exp  (44)
	exp : exp . '*' exp  (45)
	exp : exp . '/' exp  (46)
	exp : exp . '>' exp  (47)
	exp : exp . AND exp  (48)
	exp : exp . '<' exp  (49)
	exp : exp . OR exp  (50)
	exp : exp OR exp .  (50)
	exp : exp . EQUALS exp  (51)
	exp : exp . DIFF exp  (52)
	exp : exp . '=' exp  (59)
	exp : exp . '.' IDENT  (60)

	'.'  shift 79
	AND  reduce 50
	OR  reduce 50
	EQUALS  reduce 50
	DIFF  reduce 50
	'='  reduce 50
	'>'  reduce 50
	'<'  reduce 50
	'+'  reduce 50
	'-'  reduce 50
	'*'  reduce 50
	'/'  reduce 50
	';'  reduce 50
	']'  reduce 50
	')'  reduce 50
	','  reduce 50


state 90
	exp : exp . '+' exp  (43)
	exp : exp . '-' exp  (44)
	exp : exp . '*' exp  (45)
	exp : exp . '/' exp  (46)
	exp : exp . '>' exp  (47)
	exp : exp . AND exp  (48)
	exp : exp . '<' exp  (49)
	exp : exp . OR exp  (50)
	exp : exp . EQUALS exp  (51)
	exp : exp EQUALS exp .  (51)
	exp : exp . DIFF exp  (52)
	exp : exp . '=' exp  (59)
	exp : exp . '.' IDENT  (60)

	'.'  shift 79
	AND  reduce 51
	OR  reduce 51
	EQUALS  reduce 51
	DIFF  reduce 51
	'='  reduce 51
	'>'  reduce 51
	'<'  reduce 51
	'+'  reduce 51
	'-'  reduce 51
	'*'  reduce 51
	'/'  reduce 51
	';'  reduce 51
	']'  reduce 51
	')'  reduce 51
	','  reduce 51


state 91
	exp : exp . '+' exp  (43)
	exp : exp . '-' exp  (44)
	exp : exp . '*' exp  (45)
	exp : exp . '/' exp  (46)
	exp : exp . '>' exp  (47)
	exp : exp . AND exp  (48)
	exp : exp . '<' exp  (49)
	exp : exp . OR exp  (50)
	exp : exp . EQUALS exp  (51)
	exp : exp . DIFF exp  (52)
	exp : exp DIFF exp .  (52)
	exp : exp . '=' exp  (59)
	exp : exp . '.' IDENT  (60)

	'.'  shift 79
	AND  reduce 52
	OR  reduce 52
	EQUALS  reduce 52
	DIFF  reduce 52
	'='  reduce 52
	'>'  reduce 52
	'<'  reduce 52
	'+'  reduce 52
	'-'  reduce 52
	'*'  reduce 52
	'/'  reduce 52
	';'  reduce 52
	']'  reduce 52
	')'  reduce 52
	','  reduce 52


state 92
	exp : exp . '+' exp  (43)
	exp : exp . '-' exp  (44)
	exp : exp . '*' exp  (45)
	exp : exp . '/' exp  (46)
	exp : exp . '>' exp  (47)
	exp : exp . AND exp  (48)
	exp : exp . '<' exp  (49)
	exp : exp . OR exp  (50)
	exp : exp . EQUALS exp  (51)
	exp : exp . DIFF exp  (52)
	exp : exp . '=' exp  (59)
	exp : exp '=' exp .  (59)
	exp : exp . '.' IDENT  (60)

	AND  shift 68
	OR  shift 69
	EQUALS  shift 70
	DIFF  shift 71
	'='  shift 72
	'>'  shift 73
	'<'  shift 74
	'+'  shift 75
	'-'  shift 76
	'*'  shift 77
	'/'  shift 78
	'.'  shift 79
	';'  reduce 59
	']'  reduce 59
	')'  reduce 59
	','  reduce 59


state 93
	exp : exp . '+' exp  (43)
	exp : exp . '-' exp  (44)
	exp : exp . '*' exp  (45)
	exp : exp . '/' exp  (46)
	exp : exp . '>' exp  (47)
	exp : exp '>' exp .  (47)
	exp : exp . AND exp  (48)
	exp : exp . '<' exp  (49)
	exp : exp . OR exp  (50)
	exp : exp . EQUALS exp  (51)
	exp : exp . DIFF exp  (52)
	exp : exp . '=' exp  (59)
	exp : exp . '.' IDENT  (60)

	AND  shift 68
	OR  shift 69
	EQUALS  shift 70
	DIFF  shift 71
	'+'  shift 75
	'-'  shift 76
	'*'  shift 77
	'/'  shift 78
	'.'  shift 79
	'='  reduce 47
	';'  reduce 47
	']'  reduce 47
	')'  reduce 47
	','  reduce 47


state 94
	exp : exp . '+' exp  (43)
	exp : exp . '-' exp  (44)
	exp : exp . '*' exp  (45)
	exp : exp . '/' exp  (46)
	exp : exp . '>' exp  (47)
	exp : exp . AND exp  (48)
	exp : exp . '<' exp  (49)
	exp : exp '<' exp .  (49)
	exp : exp . OR exp  (50)
	exp : exp . EQUALS exp  (51)
	exp : exp . DIFF exp  (52)
	exp : exp . '=' exp  (59)
	exp : exp . '.' IDENT  (60)

	AND  shift 68
	OR  shift 69
	EQUALS  shift 70
	DIFF  shift 71
	'+'  shift 75
	'-'  shift 76
	'*'  shift 77
	'/'  shift 78
	'.'  shift 79
	'='  reduce 49
	';'  reduce 49
	']'  reduce 49
	')'  reduce 49
	','  reduce 49


state 95
	exp : exp . '+' exp  (43)
	exp : exp '+' exp .  (43)
	exp : exp . '-' exp  (44)
	exp : exp . '*' exp  (45)
	exp : exp . '/' exp  (46)
	exp : exp . '>' exp  (47)
	exp : exp . AND exp  (48)
	exp : exp . '<' exp  (49)
	exp : exp . OR exp  (50)
	exp : exp . EQUALS exp  (51)
	exp : exp . DIFF exp  (52)
	exp : exp . '=' exp  (59)
	exp : exp . '.' IDENT  (60)

	AND  shift 68
	OR  shift 69
	EQUALS  shift 70
	DIFF  shift 71
	'*'  shift 77
	'/'  shift 78
	'.'  shift 79
	'='  reduce 43
	'>'  reduce 43
	'<'  reduce 43
	'+'  reduce 43
	'-'  reduce 43
	';'  reduce 43
	']'  reduce 43
	')'  reduce 43
	','  reduce 43


state 96
	exp : exp . '+' exp  (43)
	exp : exp . '-' exp  (44)
	exp : exp '-' exp .  (44)
	exp : exp . '*' exp  (45)
	exp : exp . '/' exp  (46)
	exp : exp . '>' exp  (47)
	exp : exp . AND exp  (48)
	exp : exp . '<' exp  (49)
	exp : exp . OR exp  (50)
	exp : exp . EQUALS exp  (51)
	exp : exp . DIFF exp  (52)
	exp : exp . '=' exp  (59)
	exp : exp . '.' IDENT  (60)

	AND  shift 68
	OR  shift 69
	EQUALS  shift 70
	DIFF  shift 71
	'*'  shift 77
	'/'  shift 78
	'.'  shift 79
	'='  reduce 44
	'>'  reduce 44
	'<'  reduce 44
	'+'  reduce 44
	'-'  reduce 44
	';'  reduce 44
	']'  reduce 44
	')'  reduce 44
	','  reduce 44


state 97
	exp : exp . '+' exp  (43)
	exp : exp . '-' exp  (44)
	exp : exp . '*' exp  (45)
	exp : exp '*' exp .  (45)
	exp : exp . '/' exp  (46)
	exp : exp . '>' exp  (47)
	exp : exp . AND exp  (48)
	exp : exp . '<' exp  (49)
	exp : exp . OR exp  (50)
	exp : exp . EQUALS exp  (51)
	exp : exp . DIFF exp  (52)
	exp : exp . '=' exp  (59)
	exp : exp . '.' IDENT  (60)

	AND  shift 68
	OR  shift 69
	EQUALS  shift 70
	DIFF  shift 71
	'.'  shift 79
	'='  reduce 45
	'>'  reduce 45
	'<'  reduce 45
	'+'  reduce 45
	'-'  reduce 45
	'*'  reduce 45
	'/'  reduce 45
	';'  reduce 45
	']'  reduce 45
	')'  reduce 45
	','  reduce 45


state 98
	exp : exp . '+' exp  (43)
	exp : exp . '-' exp  (44)
	exp : exp . '*' exp  (45)
	exp : exp . '/' exp  (46)
	exp : exp '/' exp .  (46)
	exp : exp . '>' exp  (47)
	exp : exp . AND exp  (48)
	exp : exp . '<' exp  (49)
	exp : exp . OR exp  (50)
	exp : exp . EQUALS exp  (51)
	exp : exp . DIFF exp  (52)
	exp : exp . '=' exp  (59)
	exp : exp . '.' IDENT  (60)

	AND  shift 68
	OR  shift 69
	EQUALS  shift 70
	DIFF  shift 71
	'.'  shift 79
	'='  reduce 46
	'>'  reduce 46
	'<'  reduce 46
	'+'  reduce 46
	'-'  reduce 46
	'*'  reduce 46
	'/'  reduce 46
	';'  reduce 46
	']'  reduce 46
	')'  reduce 46
	','  reduce 46


state 99
	exp : exp '.' IDENT .  (60)

	.  reduce 60


state 100
	exp : IDENT '[' exp ']' .  (58)

	.  reduce 58


state 101
	args : exp . ',' args  (41)
	args : exp . ',' args  (42)
	exp : exp . '+' exp  (43)
	exp : exp . '-' exp  (44)
	exp : exp . '*' exp  (45)
	exp : exp . '/' exp  (46)
	exp : exp . '>' exp  (47)
	exp : exp . AND exp  (48)
	exp : exp . '<' exp  (49)
	exp : exp . OR exp  (50)
	exp : exp . EQUALS exp  (51)
	exp : exp . DIFF exp  (52)
	exp : exp . '=' exp  (59)
	exp : exp . '.' IDENT  (60)

	AND  shift 68
	OR  shift 69
	EQUALS  shift 70
	DIFF  shift 71
	'='  shift 72
	'>'  shift 73
	'<'  shift 74
	'+'  shift 75
	'-'  shift 76
	'*'  shift 77
	'/'  shift 78
	'.'  shift 79
	','  shift 106
	.  error


state 102
	callFunc : IDENT $$7 '(' argsOuSemArgs . ')'  (38)

	')'  shift 107
	.  error


state 103
	argsOuSemArgs : args .  (39)

	.  reduce 39


state 104
	cmd : IF '(' exp ')' . $$6 cmd  (33)
	$$6 : .  (32)

	.  reduce 32

	$$6  goto 108


state 105
	cmd : type IDENT '=' exp . ';'  (35)
	exp : exp . '+' exp  (43)
	exp : exp . '-' exp  (44)
	exp : exp . '*' exp  (45)
	exp : exp . '/' exp  (46)
	exp : exp . '>' exp  (47)
	exp : exp . AND exp  (48)
	exp : exp . '<' exp  (49)
	exp : exp . OR exp  (50)
	exp : exp . EQUALS exp  (51)
	exp : exp . DIFF exp  (52)
	exp : exp . '=' exp  (59)
	exp : exp . '.' IDENT  (60)

	AND  shift 68
	OR  shift 69
	EQUALS  shift 70
	DIFF  shift 71
	'='  shift 72
	'>'  shift 73
	'<'  shift 74
	'+'  shift 75
	'-'  shift 76
	'*'  shift 77
	'/'  shift 78
	'.'  shift 79
	';'  shift 109
	.  error


state 106
	args : exp ',' . args  (41)
	args : exp ',' . args  (42)

	IDENT  shift 64
	NUM  shift 51
	LITERAL  shift 52
	'('  shift 56
	.  error

	exp  goto 101
	callFunc  goto 59
	args  goto 110


state 107
	callFunc : IDENT $$7 '(' argsOuSemArgs ')' .  (38)

	.  reduce 38


state 108
	cmd : IF '(' exp ')' $$6 . cmd  (33)

	IDENT  shift 50
	INT  shift 4
	FLOAT  shift 5
	BOOL  shift 6
	NUM  shift 51
	STRING  shift 7
	LITERAL  shift 52
	IF  shift 53
	RETURN  shift 54
	'('  shift 56
	.  error

	type  goto 57
	exp  goto 58
	callFunc  goto 59
	cmd  goto 111


state 109
	cmd : type IDENT '=' exp ';' .  (35)

	.  reduce 35


110: reduce/reduce conflict (reduce 41, reduce 42) on ')'
state 110
	args : exp ',' args .  (41)
	args : exp ',' args .  (42)

	.  reduce 41


state 111
	cmd : IF '(' exp ')' $$6 cmd .  (33)

	.  reduce 33


Rules never reduced:
	args : exp ',' args  (42)


State 110 contains 1 reduce/reduce conflict.


36 terminals, 26 nonterminals
61 grammar rules, 112 states
